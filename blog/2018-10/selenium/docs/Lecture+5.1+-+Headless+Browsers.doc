Message-ID: <273514314.185.1529357950604@52fe1062048e>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_184_543920751.1529357950604"

------=_Part_184_543920751.1529357950604
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Lecture 5.1 - Headless Browsers</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>Lecture 5.1 - Headless Browsers</h1>
    <div class=3D"Section1">
        <p>You will have noticed by now that running tests with WebDriver r=
esults in a browser window being opened and the web pages being loaded and =
interacted with as if by some invisible mouse pointer. While it can be usef=
ul to watch the progression of a test in the browser, there are times when =
it is desirable to have the tests complete off-screen. For example, running=
 tests as part of a continuous deployment process does not require anyone t=
o watch the browser as the tests are executed. Indeed, sometimes there is n=
ot even a monitor attached to the systems that are running the tests (this =
is known as a headless environment). So how can we run tests in such headle=
ss environments?</p>
<p>This is a problem that projects like <a href=3D"http://phantomjs.org/" c=
lass=3D"external-link" rel=3D"nofollow">PhantomJS</a> were created to solve=
. PhantomJS is a web browser based on WebKit, which is the library that pow=
ers browsers like Apple Safari. Unlike a traditional browser though, Phanto=
mJS has no GUI, and is designed to be controlled by technologies like WebDr=
iver. Because it has no GUI, PhantomJS can be run on continuous integration=
 servers that are traditionally hosted on headless servers. This means you =
can run WebDriver tests on a central server in response to application chan=
ges without having to launch a browser window in a desktop environment.</p>
<p>Recently browsers like Firefox and Chrome have added native support for =
headless browsing. This is a great benefit to anyone writing WebDriver test=
s, as it means that the tests can be run on the very same browsers that end=
 users have installed, while still allowing tests to be run on a headless s=
erver.</p>
<p>These days development of PhantomJS has stalled. One of the maintainers =
of the project has <a href=3D"https://groups.google.com/forum/#!topic/phant=
omjs/9aI5d-LDuNE" rel=3D"nofollow" class=3D"external-link">stepped down</a>=
, and the latest release of PhantomJS is over 2 years old. But the good new=
s is that it is quite easy to configure Chrome and Firefox to run tests in =
a headless environment.</p>
<p>Before we start configuring headless browsers, we need to add some addit=
ional support for configuring the driver classes.</p>
<p>WebDriver uses a class called <code>DesiredCapabilities</code> that serv=
es as a generic container for browser driver settings. The <code>DesiredCap=
abilities</code> class is essentially a container for key value pairs, with=
 some convenience methods for configuring commonly used settings.</p>
<p>First we add the method <code>getDesiredCapabilities()</code> to the <co=
de>AutomatedBrowser</code> interface.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">public interface =
AutomatedBrowser {
    // ...

    DesiredCapabilities getDesiredCapabilities();

    // ...
}</pre>=20
</div>
</div>
<p>Then we add a default method in the <code>AutomatedBrowserBase</code> cl=
ass.</p>
<p>This method differs a little from the typical default decorator method i=
mplementation in that if there is no parent <code>AutomatedBrowser</code> i=
nstance to return an instance of the <code>DesiredCapabilities</code> class=
 from, we return a new instance of <code>DesiredCapabilities</code> instead=
 of <code>null</code>. This ensures that if no decorator has provided any <=
code>DesiredCapabilities</code>, we can always rely on a default instance b=
eing returned.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">@Override
public DesiredCapabilities getDesiredCapabilities() {
    if (getAutomatedBrowser() !=3D null) {
        return getAutomatedBrowser().getDesiredCapabilities();
    }

    return new DesiredCapabilities();
}</pre>=20
</div>
</div>
<p>The <code>DesiredCapabilities</code> class is used for configuration set=
tings that are common to all browsers. Each driver then has a corresponding=
 "options" class that is used to configure browser specific settings. These=
 two objects are merged together to build up the complete set of configurat=
ion settings.</p>
<p>Here is the code for the <code>ChromeDecorator</code> class updated to s=
upport these two configuration classes. We create an instance of the <code>=
ChromeOptions</code> class, <code>merge()</code> it with the common setting=
s returned by <code>getDesiredCapabilities()</code>, and pass the merged re=
sult to the <code>ChromeDriver()</code> constructor.</p>
<p>This code does not configure any additional settings yet, but does demon=
strate how the <code>DesiredCapabilities</code> class is used in conjunctio=
n with the browser specific options class.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.l=
earnprogramming.decorators;

import academy.learnprogramming.AutomatedBrowser;
import academy.learnprogramming.decoratorbase.AutomatedBrowserBase;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

public class ChromeDecorator extends AutomatedBrowserBase {
    public ChromeDecorator(final AutomatedBrowser automatedBrowser) {
        super(automatedBrowser);
    }

    @Override
    public void init() {
        final ChromeOptions options =3D new ChromeOptions();
        options.merge(getDesiredCapabilities());
        final WebDriver webDriver =3D new ChromeDriver(options);
        getAutomatedBrowser().setWebDriver(webDriver);
        getAutomatedBrowser().init();
    }
}</pre>=20
</div>
</div>
<p>We follow the same pattern for the <code>FirefoxDecorator</code> class, =
merging the <code>FirefoxDriver</code> class with the <code>DesiredCapabili=
ties</code> class.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.l=
earnprogramming.decorators;

import academy.learnprogramming.AutomatedBrowser;
import academy.learnprogramming.decoratorbase.AutomatedBrowserBase;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;

public class FirefoxDecorator extends AutomatedBrowserBase {
    public FirefoxDecorator(final AutomatedBrowser automatedBrowser) {
        super(automatedBrowser);
    }

    @Override
    public void init() {
        final FirefoxOptions options =3D new FirefoxOptions();
        options.merge(getDesiredCapabilities());
        final WebDriver webDriver =3D new FirefoxDriver(options);
        getAutomatedBrowser().setWebDriver(webDriver);
        getAutomatedBrowser().init();
    }
}</pre>=20
</div>
</div>
<p>Starting a browser in headless mode is done by configuring either the <c=
ode>ChromeOptions</code> or <code>FirefoxOptions</code> instances.</p>
<p>To launch Chrome in headless mode, we pass some arguments to the chrome =
executable. The <code>ChromeOptions</code> class provides a simple way to c=
onfigure these arguments through the method <code>setHeadless()</code>.</p>
<p>Let's take a look at the code for the <code>ChromeDecorator</code> class=
 to allow us to run Chrome in headless mode.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.l=
earnprogramming.decorators;

import academy.learnprogramming.AutomatedBrowser;
import academy.learnprogramming.decoratorbase.AutomatedBrowserBase;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

public class ChromeDecorator extends AutomatedBrowserBase {
    final boolean headless;

    public ChromeDecorator(final AutomatedBrowser automatedBrowser) {
        super(automatedBrowser);
        this.headless =3D false;
    }

    public ChromeDecorator(final boolean headless, final AutomatedBrowser a=
utomatedBrowser) {
        super(automatedBrowser);
        this.headless =3D headless;
    }

    @Override
    public void init() {
        final ChromeOptions options =3D new ChromeOptions();
        options.setHeadless(headless);
        options.merge(getDesiredCapabilities());
        final WebDriver webDriver =3D new ChromeDriver(options);
        getAutomatedBrowser().setWebDriver(webDriver);
        getAutomatedBrowser().init();
    }
}</pre>=20
</div>
</div>
<p>First we provide a instance variable called <code>headless</code> to tra=
ck whether this instance of the Chrome browser should be run in headless mo=
de or not. To set this variable we overload the constructor.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">final boolean hea=
dless;
=20
public ChromeDecorator(final AutomatedBrowser automatedBrowser) {
    super(automatedBrowser);
    this.headless =3D false;
}
=20
public ChromeDecorator(final boolean headless, final AutomatedBrowser autom=
atedBrowser) {
    super(automatedBrowser);
    this.headless =3D headless;
}</pre>=20
</div>
</div>
<p>In the <code>init()</code> method we make a call to <code>setHeadless()<=
/code> to enable or disable headless mode (although given headless mode is =
disabled by default, calling <code>setHeadless(false)</code> doesn't change=
 anything).</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">options.setHeadle=
ss(headless);</pre>=20
</div>
</div>
<p>Taking a look at the <code>ChomeOptions.setHeadless()</code> method we c=
an see that headless mode is enabled by passing the <code>--headless</code>=
 and <code>--disable-gpu</code> arguments to Chrome.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">public ChromeOpti=
ons setHeadless(boolean headless) {
  args.remove("--headless");
  if (headless) {
    args.add("--headless");
    args.add("--disable-gpu");
  }
  return this;
}</pre>=20
</div>
</div>
<p>We then update the <code>AutomatedBrowserFactory</code> <code>getChromeB=
rowser()</code> method with a parameter to define if the Chrome browser sho=
uld be headless or not.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">private Automated=
Browser getChromeBrowser(final boolean headless) {
    return new ChromeDecorator(headless,
            new ImplicitWaitDecorator(10,
                    new WebDriverDecorator()
            )
    );
}</pre>=20
</div>
</div>
<p>Finally we update the <code>getAutomatedBrowser()</code> method to allow=
 a headless instance of Chrome to be created.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">public AutomatedB=
rowser getAutomatedBrowser(String browser) {
        if ("Chrome".equalsIgnoreCase(browser)) {
            return getChromeBrowser(false);
        }
=20
        if ("ChromeHeadless".equalsIgnoreCase(browser)) {
            return getChromeBrowser(true);
        }
=20
        // ...
    }</pre>=20
</div>
</div>
<p>With these changes in place, we can update the tests to run them against=
 a headless instance of Chrome.</p>
<p>When the tests are run, you will not see the browser window be displayed=
. But the test will execute in the background and pass as before.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">    @Test
    public void formTestByIDHeadless() throws URISyntaxException {
        final AutomatedBrowser automatedBrowser =3D AUTOMATED_BROWSER_FACTO=
RY.getAutomatedBrowser("ChromeHeadless");

        // ...
    }</pre>=20
</div>
</div>
<p>The process for creating a headless instance of Firefox is almost exactl=
y the same as for Chrome.</p>
<p>First the <code>FirefoxDecorator</code> class is updated with a construc=
tor that sets the <code>headless</code> instance variable, and a call to <c=
ode>setHeadless()</code> in the options class configures the headless mode =
on the driver.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.l=
earnprogramming.decorators;
=20
import academy.learnprogramming.AutomatedBrowser;
import academy.learnprogramming.decoratorbase.AutomatedBrowserBase;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
=20
public class FirefoxDecorator extends AutomatedBrowserBase {
    final boolean headless;
=20
    public FirefoxDecorator(final AutomatedBrowser automatedBrowser) {
        super(automatedBrowser);
        this.headless =3D false;
    }
=20
    public FirefoxDecorator(final boolean headless, final AutomatedBrowser =
automatedBrowser) {
        super(automatedBrowser);
        this.headless =3D headless;
    }
=20
    @Override
    public void init() {
        final FirefoxOptions options =3D new FirefoxOptions();
        options.setHeadless(headless);
        options.merge(getDesiredCapabilities());
        final WebDriver webDriver =3D new FirefoxDriver(options);
        getAutomatedBrowser().setWebDriver(webDriver);
        getAutomatedBrowser().init();
    }
}</pre>=20
</div>
</div>
<p>Looking at the <code>FirefoxOptions.setHeadless()</code> method, we can =
see that headless mode is enabled by passing the <code>-headless</code> arg=
ument to Firefox.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">public FirefoxOpt=
ions setHeadless(boolean headless) {
  args.remove("-headless");
  if (headless) {
    args.add("-headless");
  }
  return this;
}</pre>=20
</div>
</div>
<p>The <code>AutomatedBrowserFactory</code> <code>getFirefoxBrowser()</code=
> method is then updated to support setting headless mode.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">    private Autom=
atedBrowser getFirefoxBrowser(final boolean headless) {
        return new FirefoxDecorator(headless,
                new ImplicitWaitDecorator(10,
                    new WebDriverDecorator()
                )
        );
    }</pre>=20
</div>
</div>
<p>And the <code>getAutomatedBrowser()</code> method is updated to support =
creating headless instances of Firefox.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">public AutomatedB=
rowser getAutomatedBrowser(String browser) {
    //...
=20
    if ("Firefox".equalsIgnoreCase(browser)) {
        return getFirefoxBrowser(false);
    }
=20
    if ("FirefoxHeadless".equalsIgnoreCase(browser)) {
        return getFirefoxBrowser(true);
    }
=20
    //...
}</pre>=20
</div>
</div>
<p>Then, just as with the Chrome browser, the tests can be updated to use t=
he headless version of Firefox.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">    @Test
    public void formTestByIDHeadlessFirefox() throws URISyntaxException {
        final AutomatedBrowser automatedBrowser =3D AUTOMATED_BROWSER_FACTO=
RY.getAutomatedBrowser("FirefoxHeadless");

        // ...
    }</pre>=20
</div>
</div>
<p>Running tests on specialized browsers like PhantomJS that didn't quite b=
ehave like "real" browsers used to be a pain point for testers, but was a n=
ecessary evil. By supporting headless browsing, browsers like Chrome and Fi=
refox have paved the way for testers to utilize the same browsers used by e=
nd users in automated tests on headless servers. We'll take advantage of th=
ese headless browsers in later lectures as we integrate with platforms like=
 Travis CI and AWS Lambda.</p>
<p>In addition, by exposing the ability to configure browsers via the <code=
>DesiredCapabilities</code> class we have provided a hook that we can take =
advantage of with new decorators to add functionality such as custom proxie=
s, which is exactly what we'll be doing in the next lecture.</p>
    </div>
</body>
</html>
------=_Part_184_543920751.1529357950604--
