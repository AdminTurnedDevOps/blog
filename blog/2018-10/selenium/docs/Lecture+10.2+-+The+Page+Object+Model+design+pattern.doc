Message-ID: <1106987086.201.1529358394830@4bb8964986dd>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_200_713070502.1529358394830"

------=_Part_200_713070502.1529358394830
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Lecture 10.2 - The Page Object Model design pattern</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>Lecture 10.2 - The Page Object Model design pattern</h1>
    <div class=3D"Section1">
        <p>While our previous test successfully verified the process of pur=
chasing a ticket for an event in TicketMonster, this style of testing where=
 we define each interaction with the page in a sequential order has some li=
mitations.</p>
<p>The first limitation is that each of the interactions are not particular=
ly descriptive. Someone with limited knowledge of the application being tes=
ted would quite understandably be confused by a line of code like</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">automatedBrowser=
.populateElement("tickets-1", "2", WAIT_TIME);</pre>=20
</div>
</div>
<p>What is <code>tickets-1</code> in this case? This identifier does not de=
scribe the element that it locates particularly well. You would need to be =
intimately familiar with the application being tested to know what this lin=
e of code does.</p>
<p>The second, and perhaps most significant, limitation is that the code us=
ed to construct this test is not reusable. Imagine that in addition to this=
 test that purchases a ticket, we wanted to write a second test that verifi=
ed the prices of the tickets for each available section. You might write a =
test like this to ensure that pricing changes don't result in unreasonably =
high or low ticket prices.</p>
<p>To write a second test, each of the interactions with the application to=
 the point of being able to select an event section would need to be copied=
 and pasted into a second test method. However copying and pasting is best =
avoided because it makes code much harder to maintain, since common functio=
nality now lives in multiple methods and all have to be individually update=
d.</p>
<p>One solution to both of these limitations is to use the Page Object Mode=
l, or POM, design pattern. The POM design pattern encapsulates the interact=
ions with an individual page inside a class. This means the interactions wi=
th a page are now exposed behind methods with friendly names, and the class=
es can be reused between tests.</p>
<p>Let's take a look at how we can rewrite the test using the POM design pa=
ttern.</p>
<p>Each POM class that we create needs to have access to an <code>Automated=
Browser</code> instance. In addition we will also define a common wait time=
 for the explicit waits used when interacting with elements. Exposing these=
 shared properties is done with a class called <code>BasePage</code>.</p>
<p>Note that the instance variables, static variables and constructor are a=
ll have the <code>protected</code> scope. This means that they are only ava=
ilable to classes that extend <code>BasePage</code>, meaning <code>BasePage=
</code> is not something we can instantiate directly.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.l=
earnprogramming.pages;

import academy.learnprogramming.AutomatedBrowser;

public class BasePage {
    protected static final int WAIT_TIME =3D 30;
    protected final AutomatedBrowser automatedBrowser;

    protected BasePage(AutomatedBrowser automatedBrowser) {
        this.automatedBrowser =3D automatedBrowser;
    }
}

</pre>=20
</div>
</div>
<p>We start all our tests on the main page of the TicketMonster application=
. To represent this main page, we create the class <code>MainPage</code>.</=
p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.l=
earnprogramming.pages.ticketmonster;

import academy.learnprogramming.AutomatedBrowser;
import academy.learnprogramming.pages.BasePage;

public class MainPage extends BasePage {

    private static final String URL =3D "https://ticket-monster.herokuapp.c=
om";
    private static final String BUY_TICKETS_NOW =3D "Buy tickets now";

    public MainPage(final AutomatedBrowser automatedBrowser) {
        super(automatedBrowser);
    }

    public MainPage openPage() {
        automatedBrowser.goTo(URL);
        return this;
    }

    public EventsPage buyTickets() {
        automatedBrowser.clickElement(BUY_TICKETS_NOW, WAIT_TIME);
        return new EventsPage(automatedBrowser);
    }
}


</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Let's break this code down.</p>
<p class=3D"auto-cursor-target">All of our POM classes will extend <code>Ba=
sePage</code>. Extending <code>BasePage</code> gives these classes access t=
o an instance of <code>AutomatedBrowser</code>, as well as using a shared d=
efault wait time.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">public class Mai=
nPage extends BasePage {</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">To make URLs and element identifiers more m=
aintainable, we assign the strings to constants. Using constant variables m=
eans we can give these strings some meaningful context, which will be impor=
tant later on when dealing with some of the more&nbsp;unintuitive element l=
ocators.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">private static f=
inal String URL =3D "https://ticket-monster.herokuapp.com";
private static final String BUY_TICKETS_NOW =3D "Buy tickets now";</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">The constructor takes an instance of <code>=
AutomatedBrowser</code>, and passes it to the <code>BasePage</code> constru=
ctor.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">public MainPage(=
final AutomatedBrowser automatedBrowser) {
  super(automatedBrowser);
}</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">The first method we define will open up the=
 URL to the application main page. To accomplish this action we create a me=
thod called <code>openPage()</code>.</p>
<p class=3D"auto-cursor-target">It is in methods like <code>openPage()</cod=
e> that the specific details of URLs to be opened or elements to be interac=
ted with are encapsulated. Callers of this method do not need to know the U=
RL that is being opened, and should the URL change, it only needs to be cha=
nged in one location making maintenance much easier.</p>
<p class=3D"auto-cursor-target">To allow calls to be chained, we return an =
instance of <code>this</code> as the final statement. Each method in POM cl=
asses will return the POM class that additional interactions can be perform=
ed on. This way consumers of the POM classes can easily understand the flow=
 of the application, which we will see when we write the test method.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">public MainPage =
openPage() {
  automatedBrowser.goTo(URL);
  return this;
}</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">The only action we are interested on on the=
 main page is clicking the <code>Buy tickets now</code> link, which we do i=
n a method called <code>buyTickets()</code>.</p>
<p class=3D"auto-cursor-target">If you recall from the previous lecture, ho=
w we interacted with elements like this link was not as easy as it might ha=
ve appeared, because these elements could either be styled links (<code>&lt=
;a&gt;</code> elements), or form buttons (or <code>&lt;input&gt;</code> ele=
ments). Depending on which kind of element was used, our first test had to =
use a different locator. Links could be identified by their text, while for=
m buttons had to be identified by an ID or name attribute.</p>
<p class=3D"auto-cursor-target">This distinction between elements is no lon=
ger the concern of those writing these tests, but instead has been encapsul=
ated inside this POM class. Calling the <code>buyTickets()</code> will resu=
lt in that desired element being clicked, regardless of how that element ha=
s been implemented.</p>
<p class=3D"auto-cursor-target">Because clicking this link directs the brow=
ser to the events page, we return an instance of the <code>EventsPage</code=
> class. Callers of the <code>buyTickets()</code> can understand that this =
return value indicates that a page navigation has taken place, and that fur=
ther interaction with the page now has to be performed using the <code>Even=
tsPage</code> class.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    public Event=
sPage buyTickets() {
        automatedBrowser.clickElement(BUY_TICKETS_NOW, WAIT_TIME);
        return new EventsPage(automatedBrowser);
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Let's take a look at the <code>EventsPage</=
code> class.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.=
learnprogramming.pages.ticketmonster;

import academy.learnprogramming.AutomatedBrowser;
import academy.learnprogramming.pages.BasePage;

public class EventsPage extends BasePage {
    public EventsPage(final AutomatedBrowser automatedBrowser) {
        super(automatedBrowser);
    }

    public VenuePage selectEvent(final String category, final String event)=
 {
        automatedBrowser.clickElement(category, WAIT_TIME);
        automatedBrowser.clickElement(event, WAIT_TIME);
        return new VenuePage(automatedBrowser);
    }
}

</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">As with the <code>MainPage</code> class, <c=
ode>EventsPage</code> extends the <code>BasePage</code> class, and passes a=
n instance of <code>AutomatedBrowser</code> from its constructor to the <co=
de>BaseClass</code> constructor.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">public class Eve=
ntsPage extends BasePage {
    public EventsPage(final AutomatedBrowser automatedBrowser) {
        super(automatedBrowser);
    }</pre>=20
</div>
</div>
<p>The only thing we want to do on the events page is select the event that=
 we wish to purchase tickets for. This involves clicking links in the left =
hand&nbsp;collapsible menu.</p>
<p>To allow this method to select any of the options in the menu, we pass i=
n the menu <code>category</code> and <code>event</code> name as parameters.=
</p>
<p>Selecting an event will trigger the application to load the venue page. =
We represent this navigation by returning an instance of the <code>VenuePag=
e</code> class.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    public Venue=
Page selectEvent(final String category, final String event) {
        automatedBrowser.clickElement(category, WAIT_TIME);
        automatedBrowser.clickElement(event, WAIT_TIME);
        return new VenuePage(automatedBrowser);
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Let's take a look at the <code>VenuePage</c=
ode> class.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.=
learnprogramming.pages.ticketmonster;

import academy.learnprogramming.AutomatedBrowser;
import academy.learnprogramming.pages.BasePage;

public class VenuePage extends BasePage {
    private static final String VENUE_DROP_DOWN_LIST =3D "venueSelector";
    private static final String BOOK_BUTTON =3D "bookButton";
   =20
    public VenuePage(final AutomatedBrowser automatedBrowser) {
        super(automatedBrowser);
    }

    public VenuePage selectVenue(final String venue) {
        automatedBrowser.selectOptionByTextFromSelect(venue, VENUE_DROP_DOW=
N_LIST, WAIT_TIME);
        return this;
    }

    public CheckoutPage book() {
        automatedBrowser.clickElement(BOOK_BUTTON, WAIT_TIME);
        return new CheckoutPage(automatedBrowser);
    }
}

</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">This class extends <code>BasePage</code>, p=
asses <code>AutomatedBrowser</code> to the <code>BasePage</code> constructo=
r, and defines some constants for the locators of the venue drop down list =
and the book button.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">public class Ven=
uePage extends BasePage {
    private static final String VENUE_DROP_DOWN_LIST =3D "venueSelector";
    private static final String BOOK_BUTTON =3D "bookButton";

    public VenuePage(final AutomatedBrowser automatedBrowser) {
        super(automatedBrowser);
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Selecting a venue is performed by the <code=
>selectVenue()</code> method, with the venue name passed in as an argument.=
</p>
<p class=3D"auto-cursor-target">Selecting a venue does not trigger any page=
 navigation, so we return <code>this</code> to indicate that future interac=
tions will still be performed on the same page.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    public Venue=
Page selectVenue(final String venue) {
        automatedBrowser.selectOptionByTextFromSelect(venue, VENUE_DROP_DOW=
N_LIST, WAIT_TIME);
        return this;
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Moving to the booking page is performed by =
the <code>book()</code> method.</p>
<p class=3D"auto-cursor-target">Clicking the book button results in the app=
lication navigating to the checkout page, which we represent by returning a=
n instance of the <code>CheckoutPage</code> class.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    public Check=
outPage book() {
        automatedBrowser.clickElement(BOOK_BUTTON, WAIT_TIME);
        return new CheckoutPage(automatedBrowser);
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Let's take a look at the <code>CheckoutPage=
</code> class.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.=
learnprogramming.pages.ticketmonster;

import academy.learnprogramming.AutomatedBrowser;
import academy.learnprogramming.pages.BasePage;

public class CheckoutPage extends BasePage {
    private static final String SECTION_DROP_DOWN_LIST =3D "sectionSelect";
    private static final String ADULT_TICKET_COUNT =3D "tickets-1";
    private static final String ADD_TICKETS_BUTTON =3D "add";
    private static final String EMAIL_ADDRESS =3D "email";
    private static final String CHECKOUT_BUTTON =3D "submit";

    public CheckoutPage(final AutomatedBrowser automatedBrowser) {
        super(automatedBrowser);
    }

    public CheckoutPage buySectionTickets(final String section, final Integ=
er adultCount) {
        automatedBrowser.selectOptionByTextFromSelect(section, SECTION_DROP=
_DOWN_LIST, WAIT_TIME);
        automatedBrowser.populateElement(ADULT_TICKET_COUNT, adultCount.toS=
tring(), WAIT_TIME);
        automatedBrowser.clickElement(ADD_TICKETS_BUTTON, WAIT_TIME);

        return this;
    }

    public ConfirmationPage checkout(final String email) {
        automatedBrowser.populateElement(EMAIL_ADDRESS, email, WAIT_TIME);
        automatedBrowser.clickElement(CHECKOUT_BUTTON,  WAIT_TIME);

        return new ConfirmationPage(automatedBrowser);
    }
}

</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">This class extends <code>BasePage</code> an=
d passes <code>AutomatedBrowser</code> to the <code>BasePage</code> constru=
ctor.</p>
<p class=3D"auto-cursor-target">The constant variables here are a good exam=
ple of why you want to use variables to provide context to locator strings.=
 In particular the locators <code>tickets-1</code> and <code>submit</code> =
don't have any obvious link to the elements they identify. However we can p=
rovide some meaningful context to these locators through their variable nam=
es of <code>ADULT_TICKET_COUNT</code> and <code>CHECKOUT_BUTTON</code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">public class Che=
ckoutPage extends BasePage {
    private static final String SECTION_DROP_DOWN_LIST =3D "sectionSelect";
    private static final String ADULT_TICKET_COUNT =3D "tickets-1";
    private static final String ADD_TICKETS_BUTTON =3D "add";
    private static final String EMAIL_ADDRESS =3D "email";
    private static final String CHECKOUT_BUTTON =3D "submit";

    public CheckoutPage(final AutomatedBrowser automatedBrowser) {
        super(automatedBrowser);
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">To buy tickets in a given section we use th=
e <code>buySectionTickets()</code> method. This method selects the desired =
section from the drop down list, adds the number of tickets to be bought, a=
nd clicks the <code>Add</code> button.</p>
<p class=3D"auto-cursor-target">This action does not result in any page nav=
igation, so we return <code>this</code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    public Check=
outPage buySectionTickets(final String section, final Integer adultCount) {
        automatedBrowser.selectOptionByTextFromSelect(section, SECTION_DROP=
_DOWN_LIST, WAIT_TIME);
        automatedBrowser.populateElement(ADULT_TICKET_COUNT, adultCount.toS=
tring(), WAIT_TIME);
        automatedBrowser.clickElement(ADD_TICKETS_BUTTON, WAIT_TIME);

        return this;
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">To purchase the tickets we use the <code>ch=
eckout()</code> method. This method accepts the email address to be associa=
ted with the purchase, enters that email address into the appropriate field=
, and click the <code>Checkout</code> button.</p>
<p class=3D"auto-cursor-target">Clicking the <code>Checkout</code> button n=
avigates us to the confirmation page, so we return an instance of the <code=
>ConfirmationPage</code> class.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    public Confi=
rmationPage checkout(final String email) {
        automatedBrowser.populateElement(EMAIL_ADDRESS, email, WAIT_TIME);
        automatedBrowser.clickElement(CHECKOUT_BUTTON,  WAIT_TIME);

        return new ConfirmationPage(automatedBrowser);
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Let's take a look at the&nbsp;<code>Confirm=
ationPage</code> class.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.=
learnprogramming.pages.ticketmonster;

import academy.learnprogramming.AutomatedBrowser;
import academy.learnprogramming.pages.BasePage;

public class ConfirmationPage extends BasePage {
    private static final String EMAIL_ADDRESS =3D "div.col-md-6:nth-child(1=
) &gt; div:nth-child(1) &gt; p:nth-child(2)";
    private static final String EVENT_NAME =3D "div.col-md-6:nth-child(1) &=
gt; div:nth-child(1) &gt; p:nth-child(3)";
    private static final String VENUE_NAME =3D "div.col-md-6:nth-child(1) &=
gt; div:nth-child(1) &gt; p:nth-child(4)";

    public ConfirmationPage(final AutomatedBrowser automatedBrowser) {
        super(automatedBrowser);
    }

    public String getEmail() {
        return automatedBrowser.getTextFromElement(EMAIL_ADDRESS, WAIT_TIME=
);
    }

    public String getEvent() {
        return automatedBrowser.getTextFromElement(EVENT_NAME, WAIT_TIME);
    }

    public String getVenue() {
        return automatedBrowser.getTextFromElement(VENUE_NAME, WAIT_TIME);
    }
}

</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">As has been the case for every other POM cl=
ass, This class extends <code>BasePage</code> and passes <code>AutomatedBro=
wser</code> to the <code>BasePage</code> constructor.</p>
<p class=3D"auto-cursor-target">The elements that we want to interact with =
on this page had no attributes that we could use to identify them, forcing =
us to use CSS Selectors. The use of constant variables here is particularly=
 important in giving these locators some context, as strings like <code>"di=
v.col-md-6:nth-child(1) &gt; div:nth-child(1) &gt; p:nth-child(2)"</code> a=
re difficult to decipher.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">public class Con=
firmationPage extends BasePage {
    private static final String EMAIL_ADDRESS =3D "div.col-md-6:nth-child(1=
) &gt; div:nth-child(1) &gt; p:nth-child(2)";
    private static final String EVENT_NAME =3D "div.col-md-6:nth-child(1) &=
gt; div:nth-child(1) &gt; p:nth-child(3)";
    private static final String VENUE_NAME =3D "div.col-md-6:nth-child(1) &=
gt; div:nth-child(1) &gt; p:nth-child(4)";

    public ConfirmationPage(final AutomatedBrowser automatedBrowser) {
        super(automatedBrowser);
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Unlike the other POM classes, we are not cl=
icking, selecting or populating any elements on this page. We are however i=
nterested in getting some text from the page, which we can then use to veri=
fy that the tickets we purchased have the correct values.</p>
<p class=3D"auto-cursor-target">The getter functions here return the text c=
ontent of 3 paragraph (or <code>&lt;p&gt;</code>) elements.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    public Strin=
g getEmail() {
        return automatedBrowser.getTextFromElement(EMAIL_ADDRESS, WAIT_TIME=
);
    }

    public String getEvent() {
        return automatedBrowser.getTextFromElement(EVENT_NAME, WAIT_TIME);
    }

    public String getVenue() {
        return automatedBrowser.getTextFromElement(VENUE_NAME, WAIT_TIME);
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Let's now take a look at the test method th=
at uses the POM classes.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    @Test
    public void purchaseTicketsPageObjectModel() {
        final AutomatedBrowser automatedBrowser =3D AUTOMATED_BROWSER_FACTO=
RY.getAutomatedBrowser("ChromeNoImplicitWait");
        try {
            automatedBrowser.init();

            final EventsPage eventsPage =3D new MainPage(automatedBrowser)
                    .openPage()
                    .buyTickets();

            final VenuePage venuePage =3D eventsPage
                    .selectEvent("Concert", "Rock concert of the decade");

            final CheckoutPage checkoutPage =3D venuePage
                    .selectVenue("Toronto : Roy Thomson Hall")
                    .book();

            final ConfirmationPage confirmationPage =3D checkoutPage
                    .buySectionTickets("A - Premier platinum reserve", 2)
                    .checkout("email@example.org");

            Assert.assertTrue(confirmationPage.getEmail().contains("email@e=
xample.org"));
            Assert.assertTrue(confirmationPage.getEvent().contains("Rock co=
ncert of the decade"));
            Assert.assertTrue(confirmationPage.getVenue().contains("Roy Tho=
mson Hall"));
        } finally {
            automatedBrowser.destroy();
        }
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">The code to initialize the <code>AutomatedB=
rowser</code> instance remains the same as our previous test.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    @Test
    public void purchaseTicketsPageObjectModel() {
        final AutomatedBrowser automatedBrowser =3D AUTOMATED_BROWSER_FACTO=
RY.getAutomatedBrowser("ChromeNoImplicitWait");
        try {
            automatedBrowser.init();</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Our test then starts with the main page, wh=
ich is now represented by the <code>MainPage</code> class. We start by crea=
ting a new instance of the <code>MainPage</code> class, and then chain call=
s to the <code>openPage()</code> and <code>buyTickets()</code> methods.</p>
<p class=3D"auto-cursor-target">An instance of the <code>EventsPage</code> =
class is returned by the <code>buyTickets()</code> method. We save this val=
ue in a variable called <code>eventsPage</code>.</p>
<p class=3D"auto-cursor-target">Notice that at no point in this code did we=
 make any reference to the URL that was used to open the page, nor the loca=
tors that were used to click the <code>Buy Tickets Now</code> link. These d=
etails are now handled by the POM classes, freeing up the test code from an=
y specific knowledge of how the web application works.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">            fina=
l EventsPage eventsPage =3D new MainPage(automatedBrowser)
                    .openPage()
                    .buyTickets();</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Navigating the venue, checkout and confirma=
tion pages follows the same pattern. The only values that are required to b=
e defined in the test are the names of the concerts, venues, and sections, =
the email address and the number of tickets to buy. At no point are we defi=
ning locators or making distinctions between links and form buttons.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">            fina=
l VenuePage venuePage =3D eventsPage
                    .selectEvent("Concert", "Rock concert of the decade");

            final CheckoutPage checkoutPage =3D venuePage
                    .selectVenue("Toronto : Roy Thomson Hall")
                    .book();

            final ConfirmationPage confirmationPage =3D checkoutPage
                    .buySectionTickets("A - Premier platinum reserve", 2)
                    .checkout("email@example.org");</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Validating the details of the purchased tic=
kets is also now much more streamlined. The <code>ConfirmationPage</code> c=
lass exposes the values were are interested in through getter methods, and =
the test code no longer has to deal with the obtuse CSS Selectors required =
to find the paragraph elements that hold this information.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">            Asse=
rt.assertTrue(confirmationPage.getEmail().contains("email@example.org"));
            Assert.assertTrue(confirmationPage.getEvent().contains("Rock co=
ncert of the decade"));
            Assert.assertTrue(confirmationPage.getVenue().contains("Roy Tho=
mson Hall"));</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Once the test is completed we clean up the =
resources in the <code>finally</code> block.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">        } finall=
y {
            automatedBrowser.destroy();
        }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">By using the POM design pattern we have mad=
e our test much more readable, and abstracted away many of the details requ=
ired to interact with pages like URL or locators, allowing tests to be writ=
ten against a descriptive and fluent API.</p>
    </div>
</body>
</html>
------=_Part_200_713070502.1529358394830--
