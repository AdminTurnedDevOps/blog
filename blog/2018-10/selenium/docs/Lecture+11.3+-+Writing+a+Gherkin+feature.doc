Message-ID: <239493858.201.1529358466837@dfcdb65dfc01>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_200_1256168724.1529358466836"

------=_Part_200_1256168724.1529358466836
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Lecture 11.3 - Writing a Gherkin feature</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>Lecture 11.3 - Writing a Gherkin feature</h1>
    <div class=3D"Section1">
        <p class=3D"auto-cursor-target">Now that we know how to construct r=
egular expressions to map methods to Gherkin steps, we can go ahead and add=
 annotations to all appropriate methods in the <code>AutomatedBrowserBase</=
code> class.</p>
<p class=3D"auto-cursor-target">Notice that we don't add annotations for al=
l the methods. Methods like <code>getTextFromElementWithId()</code>, which =
return a value, are not able to be used in Gherkin steps because Gherkin ha=
s no notion of variables, so the return values don't have any meaning. We a=
lso don't expose methods like <code>init()</code> and <code>destroy()</code=
>, as these lifecycle methods are called by the <code>openBrowser()</code> =
and <code>closeBrowser()</code> methods. There are some internal only metho=
ds like <code>getWebDriver()</code>, <code>getAutomatedBrowser()</code>, <c=
ode>setAutomatedBrowser()</code> and <code>getDesiredCapabilities()</code> =
that are only used by the decorators, and do not make any sense to expose a=
s Gherkin steps.</p>
<p class=3D"auto-cursor-target">The remaining steps have Cucumber annotatio=
ns applied to them, assigning regular expressions that follow the same logi=
c that we saw in the last lecture.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.=
learnprogramming.decoratorbase;

import academy.learnprogramming.AutomatedBrowser;
import academy.learnprogramming.AutomatedBrowserFactory;
import cucumber.api.java.en.And;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;

public class AutomatedBrowserBase implements AutomatedBrowser {
    // ...

    public AutomatedBrowserBase() {

    }

    public AutomatedBrowserBase(AutomatedBrowser automatedBrowser) {
        // ...
    }

    public AutomatedBrowser getAutomatedBrowser() {
        // ...
    }

    public void setAutomatedBrowser(AutomatedBrowser automatedBrowser) {
        // ...
    }

    @Given("^I open the browser \"([^\"]*)\"$")
    public void openBrowser(String browser) {
        // ...
    }

    @Given("^I close the browser$")
    public void closeBrowser() {
        // ...
    }

    @Override
    public WebDriver getWebDriver() {
        // ...
    }

    @Override
    public void setWebDriver(WebDriver webDriver) {
        // ...
    }

    @Override
    public DesiredCapabilities getDesiredCapabilities() {
        // ...
    }

    @Override
    public void init() {
        // ...
    }

    @Override
    public void destroy() {
        // ...
    }

    @And("^I open the URL \"([^\"]*)\"$")
    @Override
    public void goTo(String url) {
        // ...
    }

    @And("^I click the \\w+(?:\\s+\\w+)* with the id \"([^\"]*)\"$")
    @Override
    public void clickElementWithId(String id) {
        // ...
    }

    @And("^I click the \\w+(?:\\s+\\w+)* with the id \"([^\"]*)\" waiting u=
p to \"(\\d+)\" seconds?$")
    @Override
    public void clickElementWithId(String id, int waitTime) {
        // ...
    }

    @And("^I select the option \"([^\"]*)\" from the \\w+(?:\\s+\\w+)* with=
 the id \"([^\"]*)\"$")
    @Override
    public void selectOptionByTextFromSelectWithId(String optionText, Strin=
g id) {
        // ...
    }

    @And("^I select the option \"([^\"]*)\" from the \\w+(?:\\s+\\w+)* with=
 the id \"([^\"]*)\" waiting up to \"(\\d+)\" seconds?$")
    @Override
    public void selectOptionByTextFromSelectWithId(String optionText, Strin=
g id, int waitTime) {
        // ...
    }

    @And("^I populate the \\w+(?:\\s+\\w+)* with the id \"([^\"]*)\" with t=
he text \"([^\"]*)\"$")
    @Override
    public void populateElementWithId(String id, String text) {
        // ...
    }

    @And("^I populate the \\w+(?:\\s+\\w+)* with the id \"([^\"]*)\" with t=
he text \"([^\"]*)\" waiting up to \"(\\d+)\" seconds?$")
    @Override
    public void populateElementWithId(String id, String text, int waitTime)=
 {
        // ...
    }

    @Override
    public String getTextFromElementWithId(String id) {
        // ...
    }

    @Override
    public String getTextFromElementWithId(String id, int waitTime) {
        // ...
    }

    @And("^I click the \\w+(?:\\s+\\w+)* with the xpath \"([^\"]*)\"$")
    @Override
    public void clickElementWithXPath(String xpath) {
        // ...
    }

    @And("^I click the \\w+(?:\\s+\\w+)* with the xpath \"([^\"]*)\" waitin=
g up to \"(\\d+)\" seconds?$")
    @Override
    public void clickElementWithXPath(String xpath, int waitTime) {
        // ...
    }

    @And("^I select the option \"([^\"]*)\" from the \\w+(?:\\s+\\w+)* with=
 the xpath \"([^\"]*)\"$")
    @Override
    public void selectOptionByTextFromSelectWithXPath(String optionText, St=
ring xpath) {
        // ...
    }

    @And("^I select the option \"([^\"]*)\" from the \\w+(?:\\s+\\w+)* with=
 the xpath \"([^\"]*)\" waiting up to \"(\\d+)\" seconds?$")
    @Override
    public void selectOptionByTextFromSelectWithXPath(String optionText, St=
ring xpath, int waitTime) {
        // ...
    }

    @And("^I populate the \\w+(?:\\s+\\w+)* with the xpath \"([^\"]*)\" wit=
h the text \"([^\"]*)\"$")
    @Override
    public void populateElementWithXPath(String xpath, String text) {
        // ...
    }

    @And("^I populate the \\w+(?:\\s+\\w+)* with the xpath \"([^\"]*)\" wit=
h the text \"([^\"]*)\" waiting up to \"(\\d+)\" seconds?$")
    @Override
    public void populateElementWithXPath(String xpath, String text, int wai=
tTime) {
        // ...
    }

    @Override
    public String getTextFromElementWithXPath(String xpath) {
        // ...
    }

    @Override
    public String getTextFromElementWithXPath(String xpath, int waitTime) {
        // ...
    }

    @And("^I click the \\w+(?:\\s+\\w+)* with the css selector \"([^\"]*)\"=
$")
    @Override
    public void clickElementWithCSSSelector(String cssSelector) {
        // ...
    }

    @And("^I click the \\w+(?:\\s+\\w+)* with the css selector \"([^\"]*)\"=
 waiting up to \"(\\d+)\" seconds?$")
    @Override
    public void clickElementWithCSSSelector(String cssSelector, int waitTim=
e) {
        // ...
    }

    @And("^I select the option \"([^\"]*)\" from the \\w+(?:\\s+\\w+)* with=
 the css selector \"([^\"]*)\"$")
    @Override
    public void selectOptionByTextFromSelectWithCSSSelector(String optionTe=
xt, String cssSelector) {
        // ...
    }

    @And("^I select the option \"([^\"]*)\" from the \\w+(?:\\s+\\w+)* with=
 the css selector \"([^\"]*)\" waiting up to \"(\\d+)\" seconds?$")
    @Override
    public void selectOptionByTextFromSelectWithCSSSelector(String optionTe=
xt, String cssSelector, int waitTime) {
        // ...
    }

    @And("^I populate the \\w+(?:\\s+\\w+)* with the css selector \"([^\"]*=
)\" with the text \"([^\"]*)\"$")
    @Override
    public void populateElementWithCSSSelector(String cssSelector, String t=
ext) {
        // ...
    }

    @And("^I populate the \\w+(?:\\s+\\w+)* with the css selector \"([^\"]*=
)\" with the text \"([^\"]*)\" waiting up to \"(\\d+)\" seconds?$")
    @Override
    public void populateElementWithCSSSelector(String cssSelector, String t=
ext, int waitTime) {
        // ...
    }

    @Override
    public String getTextFromElementWithCSSSelector(String cssSelector) {
        // ...
    }

    @Override
    public String getTextFromElementWithCSSSelector(String cssSelector, int=
 waitTime) {
        // ...
    }

    @And("^I click the \\w+(?:\\s+\\w+)* with the name \"([^\"]*)\"$")
    @Override
    public void clickElementWithName(String name) {
        // ...
    }

    @And("^I click the \\w+(?:\\s+\\w+)* with the name \"([^\"]*)\" waiting=
 up to \"(\\d+)\" seconds?$")
    @Override
    public void clickElementWithName(String name, int waitTime) {
        // ...
    }

    @And("^I select the option \"([^\"]*)\" from the \\w+(?:\\s+\\w+)* with=
 the name \"([^\"]*)\"$")
    @Override
    public void selectOptionByTextFromSelectWithName(String optionText, Str=
ing name) {
        // ...
    }

    @And("^I select the option \"([^\"]*)\" from the \\w+(?:\\s+\\w+)* with=
 the name \"([^\"]*)\" waiting up to \"(\\d+)\" seconds?$")
    @Override
    public void selectOptionByTextFromSelectWithName(String optionText, Str=
ing name, int waitTime) {
        // ...
    }

    @And("^I populate the \\w+(?:\\s+\\w+)* with the name \"([^\"]*)\" with=
 the text \"([^\"]*)\"$")
    @Override
    public void populateElementWithName(String name, String text) {
        // ...
    }

    @And("^I populate the \\w+(?:\\s+\\w+)* with the name \"([^\"]*)\" with=
 the text \"([^\"]*)\" waiting up to \"(\\d+)\" seconds?$")
    @Override
    public void populateElementWithName(String name, String text, int waitT=
ime) {
        // ...
    }

    @Override
    public String getTextFromElementWithName(String name) {
        // ...
    }

    @Override
    public String getTextFromElementWithName(String name, int waitTime) {
        // ...
    }

    @And("^I click the \"([^\"]*)\" \\w+(?:\\s+\\w+)*$")
    @Override
    public void clickElement(String locator) {
        // ...
    }

    @And("^I click the \"([^\"]*)\" \\w+(?:\\s+\\w+)* waiting up to \"(\\d+=
)\" seconds?$")
    @Override
    public void clickElement(String locator, int waitTime) {
        // ...
    }

    @And("^I select the option \"([^\"]*)\" from the \"([^\"]*)\" \\w+(?:\\=
s+\\w+)*$")
    @Override
    public void selectOptionByTextFromSelect(String optionText, String loca=
tor) {
        // ...
    }

    @And("^I select the option \"([^\"]*)\" from the \"([^\"]*)\" \\w+(?:\\=
s+\\w+)* waiting up to \"(\\d+)\" seconds?$")
    @Override
    public void selectOptionByTextFromSelect(String optionText, String loca=
tor, int waitTime) {
        // ...
    }

    @And("^I populate the \"([^\"]*)\" \\w+(?:\\s+\\w+)* with the text \"([=
^\"]*)\"$")
    @Override
    public void populateElement(String locator, String text) {
        // ...
    }

    @And("^I populate the \"([^\"]*)\" \\w+(?:\\s+\\w+)* with the text \"([=
^\"]*)\" waiting up to \"(\\d+)\" seconds?$")
    @Override
    public void populateElement(String locator, String text, int waitTime) =
{
        // ...
    }

    @Override
    public String getTextFromElement(String locator) {
        // ...
    }

    @Override
    public String getTextFromElement(String locator, int waitTime) {
        // ...
    }

    @And("^I capture the HAR file$")
    @Override
    public void captureHarFile() {
        // ...
    }

    @And("^I capture the complete HAR file$")
    @Override
    public void captureCompleteHarFile() {
        // ...
    }

    @And("^I save the HAR file to \"([^\"]*)\"$")
    @Override
    public void saveHarFile(String file) {
        // ...
    }

    @And("^I block the request to \"([^\"]*)\" returning the HTTP code \"\\=
d+\"$")
    @Override
    public void blockRequestTo(final String url, final int responseCode) {
        // ...
    }

    @And("^I alter the response fron \"([^\"]*)\" returning the HTTP code \=
"\\d+\" and the response body:$")
    @Override
    public void alterResponseFrom(String url, int responseCode, String resp=
onseBody) {
        // ...
    }

    @And("^I maximize the window$")
    @Override
    public void maximizeWindow() {
        // ...
    }
}


</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">With these annotations in place, we can now=
 write a feature file to complete a test of a ticket purchase from TicketMo=
nster.</p>
<p class=3D"auto-cursor-target">Save the following code to the file <code>s=
rc/test/resources/academy/learnprogramming/ticketmonster.feature</code>.</p=
>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">Feature: Test Ti=
cketMonster
  Scenario: Purchase Tickets
    Given I open the browser "ChromeNoImplicitWait"
    When I open the URL "https://ticket-monster.herokuapp.com"
    And I click the "Buy tickets now" button waiting up to "10" seconds
    And I click the "Concert" link waiting up to "10" seconds
    And I click the "Rock concert of the decade" link waiting up to "10" se=
conds
    And I select the option "Toronto : Roy Thomson Hall" from the "venueSel=
ector" drop down list waiting up to "10" seconds
    And I click the "bookButton" button waiting up to "10" seconds
    And I select the option "A - Premier platinum reserve" from the "sectio=
nSelect" drop down list waiting up to "10" seconds
    And I populate the "tickets-1" text box with the text "2" waiting up to=
 "10" seconds
    And I click the "add" button waiting up to "10" seconds
    And I populate the "email" text box with the text "email@example.org" w=
aiting up to "10" seconds
    And I click the "submit" button waiting up to "10" seconds
    Then I close the browser</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Now either run the <code>CucumberTest</code=
> test class from IntelliJ, or commit the code to GitHub and let Travis CI =
run the test for you. We have just successfully replicated the journey thro=
ugh the TicketMonster application that we wrote in Java in a previous lectu=
re.</p>
<p class=3D"auto-cursor-target">If you read this test out aloud it almost s=
ounds like instructions you would give a colleague if you were instructing =
them to complete a ticket purchase. But the format is still a bit clunky. M=
ost of the steps end with the phrase <code>waiting up to "10" seconds</code=
>, and some of the locators like <code>tickets-1</code> don't give a lot of=
 context.</p>
<p class=3D"auto-cursor-target">Let's address the needless repetition of th=
e phrase <code>waiting up to "10" seconds</code>.</p>
<p class=3D"auto-cursor-target">We start by adding a new method called <cod=
e>setDefaultExplicitWaitTime()</code> to the <code>AutomatedBrowser</code> =
interface. We'll use this method to set a default time to be used with an e=
xplicit wait on all the steps.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.=
learnprogramming;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;

public interface AutomatedBrowser {
    // ...

    void setDefaultExplicitWaitTime(int waitTime);

=09// ...
}

</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">This method is then implemented in the <cod=
e>AutomatedBrowserBase</code> class, and exposed as a Gherkin step.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.=
learnprogramming.decoratorbase;

import academy.learnprogramming.AutomatedBrowser;
import academy.learnprogramming.AutomatedBrowserFactory;
import cucumber.api.java.en.And;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;

public class AutomatedBrowserBase implements AutomatedBrowser {
    // ...

    @And("^I set the default explicit wait time to \"(\\d+)\" seconds?$")
    @Override
    public void setDefaultExplicitWaitTime(int waitTime) {
        if (getAutomatedBrowser() !=3D null) {
            getAutomatedBrowser().setDefaultExplicitWaitTime(waitTime);
        }
    }

    // ...
}

</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Then in the <code>WebDriverDecorator</code>=
 class we capture the default wait time in the <code>setDefaultExplicitWait=
Time()</code> method, and use the default wait time if it is greater than 0=
 for any of the methods that previously did not accept a <code>waitTime</co=
de> parameter.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">package academy.=
learnprogramming.decorators;

import academy.learnprogramming.AutomatedBrowser;
import academy.learnprogramming.decoratorbase.AutomatedBrowserBase;
import academy.learnprogramming.utils.SimpleBy;
import academy.learnprogramming.utils.impl.SimpleByImpl;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class WebDriverDecorator extends AutomatedBrowserBase {

=09// ...

    private int defaultExplicitWaitTime;

    // ...

    @Override
    public void setDefaultExplicitWaitTime(final int waitTime) {
        defaultExplicitWaitTime =3D waitTime;
    }

    // ...

    @Override
    public void clickElementWithId(final String id) {
        if (defaultExplicitWaitTime &lt;=3D 0) {
            webDriver.findElement(By.id(id)).click();
        } else {
            clickElementWithId(id, defaultExplicitWaitTime);
        }
    }

    // ...

    @Override
    public void clickElement(final String locator) {
        clickElement(locator, defaultExplicitWaitTime);
    }

    // ...
}

</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">In the <code>setDefaultExplicitWaitTime()</=
code> method the <code>defaultExplicitWaitTime</code> instance variable is =
set to the default wait time.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    private int =
defaultExplicitWaitTime;

    @Override
    public void setDefaultExplicitWaitTime(final int waitTime) {
        defaultExplicitWaitTime =3D waitTime;
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">We then use this default value in any metho=
d that interacts with an element, but does not accept a wait time parameter=
. For example, the <code>clickElementWithId()</code> method below does not =
accept a wait time parameter, and will by default attempt to click the elem=
ent immediately with no wait.</p>
<p class=3D"auto-cursor-target">With the change we are making, if <code>def=
aultExplicitWaitTime</code> is greater than zero we instead call the overlo=
aded <code>clickElementWithId()</code> method that does accept a wait time =
parameter, passing in the value of <code>defaultExplicitWaitTime</code>. Th=
is means that if <code>defaultExplicitWaitTime</code> has been defined, met=
hods that did not accept a wait time parameter now defer to those overloade=
d version of the method that do, and will in turn wait for a period of time=
 for the element that is being interacted with to be available and in the c=
orrect state.</p>
<p class=3D"auto-cursor-target">All the methods that do no accept a wait ti=
me parameter have been rewritten with this new if statement.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    @Override
    public void clickElementWithId(final String id) {
        if (defaultExplicitWaitTime &lt;=3D 0) {
            webDriver.findElement(By.id(id)).click();
        } else {
            clickElementWithId(id, defaultExplicitWaitTime);
        }
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">The only methods that don't use the same lo=
gic of checking to see if <code>defaultExplicitWaitTime</code> is greater t=
han 0 are those that use the simplified locator strings. These methods alre=
ady deferred to their overloaded siblings with a wait time of zero, which i=
s now replaced with the <code>defaultExplicitWaitTime</code> variable.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    @Override
    public void clickElement(final String locator) {
        clickElement(locator, defaultExplicitWaitTime);
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Now we can write the Gherkin feature like t=
his. We call the step <code>And I set the default explicit wait time to "10=
" seconds</code>, and remove the phrase <code>waiting up to "10" seconds</c=
ode> from all the other steps.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">Feature: Test Ti=
cketMonster
  Scenario: Purchase Tickets with default wait time
    Given I open the browser "ChromeNoImplicitWait"
    And I set the default explicit wait time to "10" seconds
    When I open the URL "https://ticket-monster.herokuapp.com"
    And I click the "Buy tickets now" button
    And I click the "Concert" link
    And I click the "Rock concert of the decade" link
    And I select the option "Toronto : Roy Thomson Hall" from the "venueSel=
ector" drop down list
    And I click the "bookButton" button
    And I select the option "A - Premier platinum reserve" from the "sectio=
nSelect" drop down list
    And I populate the "tickets-1" text box with the text "2"
    And I click the "add" button
    And I populate the "email" text box with the text "email@example.org"
    And I click the "submit" button
    Then I close the browser</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">We are now very close to having a test that=
 can be written and read in something close to plain English. The last rema=
ining hurdle are the locators like <code>tickets-1</code>, which are hard t=
o read.</p>
<p class=3D"auto-cursor-target">Gherkin does not have any native notions of=
 constants, meaning we need to introduce something we'll call aliases. Alia=
ses are nothing more than key value pairs, but they allow us to assign a me=
aningful key like <code>Adult Ticket Count</code> to the value <code>ticket=
s-1</code>. We can then use the key <code>Adult Ticket Count</code> in the =
Gherkin step, making the step much more readable.</p>
<p class=3D"auto-cursor-target">To store these key value pairs, we create a=
 new instance variable called <code>aliases</code>, and a new method called=
 <code>setAliases()</code> to save them.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">public class Aut=
omatedBrowserBase implements AutomatedBrowser {

    // ...

    private Map&lt;String, String&gt; aliases =3D new HashMap&lt;&gt;();

    // ...

    @Given("^I set the following aliases:$")
    public void setAliases(Map&lt;String, String&gt; aliases) {
        this.aliases.putAll(aliases);
    }

    // ...
}</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">We then make use of a feature in Cucumber c=
alled data tables to populate the <code>aliases</code> map.</p>
<p class=3D"auto-cursor-target">Notice that the regular expression <code>^I=
 set the following aliases:$</code> has no capture groups. Traditionally we=
 use capture groups as a way of passing values to the method parameters. Bu=
t in this case the data table is supplied after the step, and passed into t=
he method as a <code>Map</code> object.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    @Given("^I s=
et the following aliases:$")
    public void setAliases(Map&lt;String, String&gt; aliases) {
        this.aliases.putAll(aliases);
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">We call this step like so. The table undern=
eath the step is passed to the method as a Map, with the first column being=
 the key and the second column is the value.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    And I set th=
e following aliases:
      | Venue              | venueSelector |
      | Book               | bookButton    |
      | Section            | sectionSelect |
      | Adult Ticket Count | tickets-1     |
      | Add Tickets        | add           |
      | Checkout           | submit        |</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Now that we can populate this map, we need =
a way to read it.</p>
<p class=3D"auto-cursor-target">Java 8 has a handy method called <code>getO=
rDefault()</code> that allows us to get a value from a map, or return a def=
ault value. Now inside every method of the <code>AutomatedBrowserBase</code=
> class we pass string parameters to the child <code>AuotomatedBrowser</cod=
e> instance using the string value as a key of the <code>aliases</code> map=
, or if the aliases map does not contain the string as a key, the parameter=
 is passed as is.</p>
<p class=3D"auto-cursor-target">For example, instead of calling</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">getAutomatedBrow=
ser().selectOptionByTextFromSelectWithId(optionText, id)</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">which passes the parameters <code>optionTex=
t</code> and <code>id</code> directly through to the child <code>Auotomated=
Browser</code> instance, we instead call&nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">getAutomatedBrow=
ser().selectOptionByTextFromSelectWithId(aliases.getOrDefault(optionText, o=
ptionText), aliases.getOrDefault(id, id))</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">The code <code>aliases.getOrDefault(optionT=
ext, optionText)</code> means "Get the value assigned to the key <code>opti=
onText</code> from the aliases map, or if that key does not exist, return <=
code>optionText</code> as the default value".</p>
<p class=3D"auto-cursor-target">The code below shows how the methods in the=
 the <code>AutomatedBrowserBase</code> class now look as they first try to =
look up the aliases map for an aliased value. Every method has been updated=
 to look up the <code>aliases</code> map, and the code below shows how the =
<code>selectOptionByTextFromSelectWithId()</code> method was updated.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">    @And("^I sel=
ect the option \"([^\"]*)\" from the \\w+(?:\\s+\\w+)* with the id \"([^\"]=
*)\"$")
    @Override
    public void selectOptionByTextFromSelectWithId(String optionText, Strin=
g id) {
        if (getAutomatedBrowser() !=3D null) {
            getAutomatedBrowser().selectOptionByTextFromSelectWithId(
                    aliases.getOrDefault(optionText, optionText),
                    aliases.getOrDefault(id, id));
        }
    }</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">These changes mean we can now write the tes=
t like this. The aliases map now gives obscure locators like <code>tickets-=
1</code> a readable name like <code>Adult Ticket Count</code>.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: scala; gutter: false; theme: RDark" data-theme=3D"RDark">Feature: Test Ti=
cketMonster
  Scenario: Purchase Tickets with default wait time and aliases
    Given I open the browser "ChromeNoImplicitWait"
    And I set the following aliases:
      | Venue              | venueSelector |
      | Book               | bookButton    |
      | Section            | sectionSelect |
      | Adult Ticket Count | tickets-1     |
      | Add Tickets        | add           |
      | Checkout           | submit        |
    And I set the default explicit wait time to "10" seconds
    When I open the URL "https://ticket-monster.herokuapp.com"
    And I click the "Buy tickets now" button
    And I click the "Concert" link
    And I click the "Rock concert of the decade" link
    And I select the option "Toronto : Roy Thomson Hall" from the "Venue" d=
rop down list
    And I click the "Book" button
    And I select the option "A - Premier platinum reserve" from the "Sectio=
n" drop down list
    And I populate the "Adult Ticket Count" text box with the text "2"
    And I click the "Add Tickets" button
    And I populate the "email" text box with the text "email@example.org"
    And I click the "Checkout" button
    Then I close the browser</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">Now that we have aliases exposing the eleme=
nt ids and names with friendly names like <code>Add Tickets</code> and <cod=
e>Checkout</code>, the test fulfills the requirement of providing the imple=
mentation details required to execute the test while also being easy to rea=
d. Anyone familiar with the TicketMonster web application would be able to =
follow these instructions to purchase tickets for the concert. This is the =
beauty of the Gherkin language, and the power of the Cucumber library.</p>
    </div>
</body>
</html>
------=_Part_200_1256168724.1529358466836--
